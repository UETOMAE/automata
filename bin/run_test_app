#!/bin/bash

#
# Usage
#
exit_with_usage() {
  echo "basename $0"
  echo "    -t  Specify target Device ID"
  echo "    -m  Integrate with test management tool"
  exit
}

#
# Parse options
#
while getopts "t:mh" OPT; do
  case $OPT in
    t)  TARGET_DEVICE=$OPTARG
        ;;
    m)  export INTEGRATE_TEST_MANAGEMENT_TOOL=yes
        ;;
    h)  exit_with_usage
        ;;
    \?) exit_with_usage
        ;;
  esac
done
shift $((OPTIND - 1))
TARGET_CASE=( "$TEST_CASES" )
[ $# -ne 0 ] && TARGET_CASE=( "$@" )

#
# Loop in target browsers and run test
#
RET_CODE=0
[ -z "${DEVICE_OS}" ] && DEVICE_OS=()
for ((i=0; i<${#DEVICE_OS[@]}; i++)) {
  #
  # Set target user agent
  #
  export OS=${DEVICE_OS[$i]}
  export OS_VERSION=${DEVICE_OS_VERSION[$i]}
  export DEVICE=${DEVICE_NAME[$i]}
  #
  # Generate user agent id using md5
  #
  DEVICE_ID=$(echo "${OS} ${OS_VERSION} ${DEVICE}" | openssl md5 -binary | xxd -p)
  DEVICE_ID=$(echo -e "$DEVICE_ID" | tr -d '[:space:]')
  if [ -n "$TARGET_DEVICE" ] && [ "$TARGET_DEVICE" != "$DEVICE_ID" ]; then
    continue
  fi
  #
  # Generate build name
  # 
  BROWSER_STACK_BUILD_NAME="${PROJECT_NAME}__${OS} ${OS_VERSION} ${DEVICE}__$(env LC_CTYPE=C < /dev/urandom tr -cd 'a-f0-9' | head -c 8)"
  export BROWSER_STACK_BUILD_NAME
  BUILD_RESULTS="$TEST_RESULTS/$BROWSER_STACK_BUILD_NAME"
  mkdir -p "$BUILD_RESULTS"
  #
  # Run test
  #
  echo "=============================================================================="
  echo "Running automation test on..."
  echo "  App URL:    ${APP_URL}"
  echo "  OS:         ${OS} ${OS_VERSION}"
  echo "  Device:     ${DEVICE}"
  echo "  Device ID:  ${DEVICE_ID}"
  echo "  Build Name: ${BROWSER_STACK_BUILD_NAME}"
  ARGS=()
  ARGS=("${ARGS[@]}" "--outputdir" "$BUILD_RESULTS")
  if [ "$INTEGRATE_TEST_MANAGEMENT_TOOL" == "yes" ]; then
    if [ "$TEST_MANAGEMENT_TOOL" == "practitest" ]; then
      if ! python "$LIB_DIR/practi_validate.py" "$PRACTITEST_TARGET_TEST_SET_ID"
      then
        exit 1
      fi
      LISTENER="$LIB_DIR/robot_listener.py"
      MODIFIER="$LIB_DIR/robot_modifier.py"
      ARGS=("${ARGS[@]}" "--listener" "$LISTENER" "--prerunmodifier" "$MODIFIER")
    fi
  fi
  ARGS=("${ARGS[@]}" "${TARGET_CASE[@]}")
  [ -z "$AUTOMATA_BIN_ROBOT" ] && AUTOMATA_BIN_ROBOT=robot
  if ! "$AUTOMATA_BIN_ROBOT" "${ARGS[@]}"
  then
    RET_CODE=1
  fi
  #
  # Get public url to BrowserStack result page and generate html to results dir
  #
  echo "Execution logs on BrowserStack:"
  [ -z "$AUTOMATA_PY_BS_APP_PUBLIC_URL" ] && AUTOMATA_PY_BS_APP_PUBLIC_URL=$LIB_DIR/bs_app_public_url.py
  mapfile -t BS_SESSION_INFO < <(python "$AUTOMATA_PY_BS_APP_PUBLIC_URL" "$BROWSER_STACK_BUILD_NAME")
  BS_SESSION_FILE=$BUILD_RESULTS/browserstack.html
  echo "<html><body><ul>" > "$BS_SESSION_FILE"
  for ((si=0; si<${#BS_SESSION_INFO[@]}; si+=2)) {
    echo "<li><a href=\"${BS_SESSION_INFO[$si+1]}\" target=\"_blank\">${BS_SESSION_INFO[$si]}</a></li>" >> "$BS_SESSION_FILE"
    echo "  ${BS_SESSION_INFO[$si]}"
    echo "  ${BS_SESSION_INFO[$si+1]}"
  }
  echo "</ul></body></html>" >> "$BS_SESSION_FILE"
}

exit $RET_CODE
