#!/bin/bash

#
# Usage
#
exit_with_usage() {
  echo "basename $0"
  echo "    -u  Specify target UserAgent ID"
  echo "    -m  Integrate with test management tool"
  exit
}

#
# Parse options
#
export BROWSER=chrome
while getopts "b:mh" OPT; do
  case $OPT in
    b)  export BROWSER=$OPTARG
        ;;
    m)  export INTEGRATE_TEST_MANAGEMENT_TOOL=yes
        ;;
    h)  exit_with_usage
        ;;
    \?) exit_with_usage
        ;;
  esac
done
shift $((OPTIND - 1))
TARGET_CASE=( "$TEST_CASES" )
[ $# -ne 0 ] && TARGET_CASE=( "$@" )

#
# Prepare and validate test environment
#
export LOCAL_MODE=true
BIN_DIR=$(cd "$(dirname "$0")" && pwd)
# shellcheck source=/dev/null
. "$BIN_DIR/test_automata_env"

#
# Detect environment variables for appium
#
if [ "$TARGET_TYPE" = "app" ]; then
  [ -z "$APPIUM_URL" ] && export APPIUM_URL="http://localhost:4723/wd/hub"
  if [ -z "$APPIUM_OS" ]; then
    echo "The environment variable 'APPIUM_OS' hove to be set in .env file or anywhere."
    exit 1
  fi
  if [ -z "$APPIUM_OS_VERSION" ]; then
    echo "The environment variable 'APPIUM_OS_VERSION' hove to be set in .env file or anywhere."
    exit 1
  fi
  if [ -z "$APPIUM_DEVICE" ]; then
    echo "The environment variable 'APPIUM_DEVICE' hove to be set in .env file or anywhere."
    exit 1
  fi
fi

#
# Detect if script is running on docker container
#
export RUN_ON_DOCKER=false
[ -f /.dockerenv ] && RUN_ON_DOCKER=true
[ -z "$BROWSER_STACK_USERNAME" ] && export BROWSER_STACK_USERNAME=dummy
[ -z "$BROWSER_STACK_ACCESS_KEY" ] && export BROWSER_STACK_ACCESS_KEY=dummy

#
# Run test
#
if [ "$RUN_ON_DOCKER" = "true" ]; then
  Xvfb :99 -ac -screen 0 "${SCREEN_WIDTH}x${SCREEN_HEIGHT}x${SCREEN_COLOR_DEPTH}" &
  export DISPLAY=:99
fi
ARGS=()
OUTPUT_DIR="$TEST_RESULTS/local-$(date "+%s")"
export BUILD_RESULTS="$OUTPUT_DIR"
export BUILD_TMP="$BUILD_RESULTS/tmp"
mkdir -p "$BUILD_RESULTS"
mkdir -p "$BUILD_TMP"
ARGS=("${ARGS[@]}" "--outputdir" "$OUTPUT_DIR")
if [ "$INTEGRATE_TEST_MANAGEMENT_TOOL" == "yes" ]; then
  if [ "$TEST_MANAGEMENT_TOOL" == "practitest" ]; then
    if ! python "$LIB_DIR/practi_validate.py" "$PRACTITEST_TARGET_TEST_SET_ID"
    then
      exit 1
    fi
    LISTENER="$LIB_DIR/robot_listener.py"
    MODIFIER="$LIB_DIR/robot_modifier.py"
    ARGS=("${ARGS[@]}" "--listener" "$LISTENER" "--prerunmodifier" "$MODIFIER")
  fi
fi
ARGS=("${ARGS[@]}" "${TARGET_CASE[@]}")
[ -z "$AUTOMATA_BIN_ROBOT" ] && AUTOMATA_BIN_ROBOT=robot
"$AUTOMATA_BIN_ROBOT" "${ARGS[@]}"
