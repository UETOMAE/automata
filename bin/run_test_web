#!/bin/bash

#
# Usage
#
exit_with_usage() {
  echo "basename $0"
  echo "    -u  Specify target UserAgent ID"
  exit
}

#
# Parse options
#
while getopts "u:h" OPT; do
  case $OPT in
    u)  TARGET_UA=$OPTARG
        ;;
    h)  exit_with_usage
        ;;
    \?) exit_with_usage
        ;;
  esac
done
shift $((OPTIND - 1))
TARGET_CASE=( "$TEST_CASES" )
[ $# -ne 0 ] && TARGET_CASE=( "$@" )

#
# Wake up BrowserStackLocal
#
[ -z "$BROWSER_STACK_LOCAL" ] && export BROWSER_STACK_LOCAL=false
if [ "$BROWSER_STACK_LOCAL" == "true" ]; then
  BROWSER_STACK_LOCAL_LOG=/tmp/browser_stack_local.log
  [ -z "$AUTOMATA_BIN_BROWSERSTACKLOCAL" ] && AUTOMATA_BIN_BROWSERSTACKLOCAL=BrowserStackLocal
  [ -z "$AUTOMATA_BROWSERSTACKLOCAL_TIMEOUT" ] && AUTOMATA_BROWSERSTACKLOCAL_TIMEOUT=30
  $AUTOMATA_BIN_BROWSERSTACKLOCAL --key "${BROWSER_STACK_ACCESS_KEY}" > "$BROWSER_STACK_LOCAL_LOG" &
  WAITING_TIME=0
  until grep "You can now access your local server(s) in our remote browser." $BROWSER_STACK_LOCAL_LOG > /dev/null
  do
    sleep 1
    WAITING_TIME=$((++WAITING_TIME))
    if [[ $WAITING_TIME -gt AUTOMATA_BROWSERSTACKLOCAL_TIMEOUT ]]; then
      echo "BrowserStackLocal could be started in $AUTOMATA_BROWSERSTACKLOCAL_TIMEOUT sec. Please check it out."
      exit 1
    fi
  done
fi

#
# Loop in target browsers and run test
#
RET_CODE=0
for ((i=0; i<${#UA_OS[@]}; i++)) {
  #
  # Set target user agent
  #
  export OS=${UA_OS[$i]}
  export OS_VERSION=${UA_OS_VERSION[$i]}
  export BROWSER=${UA_BROWSER[$i]}
  export BROWSER_VERSION=${UA_BROWSER_VERSION[$i]}
  #
  # Generate user agent id using md5
  #
  UA_ID=$(echo "${OS} ${OS_VERSION} ${BROWSER} ${BROWSER_VERSION}" | openssl md5 -binary | xxd -p)
  UA_ID=$(echo -e "$UA_ID" | tr -d '[:space:]')
  if [ -n "$TARGET_UA" ] && [ "$TARGET_UA" != "$UA_ID" ]; then
    continue
  fi
  #
  # Generate build name
  # 
  BROWSER_STACK_BUILD_NAME="${PROJECT_NAME}__${OS} ${OS_VERSION}_${BROWSER} ${BROWSER_VERSION}__$(env LC_CTYPE=C < /dev/urandom tr -cd 'a-f0-9' | head -c 8)"
  export BROWSER_STACK_BUILD_NAME
  BUILD_RESULTS="$TEST_RESULTS/$BROWSER_STACK_BUILD_NAME"
  mkdir -p "$BUILD_RESULTS"
  #
  # Run test
  #
  echo "=============================================================================="
  echo "Running automation test on..."
  echo "  OS:         ${OS} ${OS_VERSION}"
  echo "  Browser:    ${BROWSER} ${BROWSER_VERSION}"
  echo "  UAID:       ${UA_ID}"
  echo "  Build Name: ${BROWSER_STACK_BUILD_NAME}"
  [ -z "$AUTOMATA_BIN_ROBOT" ] && AUTOMATA_BIN_ROBOT=robot
  LISTENER="$LIB_DIR/robot_listener.py"
  MODIFIER="$LIB_DIR/robot_modifier.py"
  if ! $AUTOMATA_BIN_ROBOT --outputdir "$BUILD_RESULTS" --listener "$LISTENER" --prerunmodifier "$MODIFIER" "${TARGET_CASE[@]}"
  then
    RET_CODE=1
  fi
  #
  # Get public url to BrowserStack result page and generate html to results dir
  #
  echo "Execution logs on BrowserStack:"
  [ -z "$AUTOMATA_PY_BS_PUBLIC_URL" ] && AUTOMATA_PY_BS_PUBLIC_URL=$LIB_DIR/bs_public_url.py
  mapfile -t BS_SESSION_INFO < <(python "$AUTOMATA_PY_BS_PUBLIC_URL" "$BROWSER_STACK_BUILD_NAME")
  BS_SESSION_FILE="$BUILD_RESULTS/browserstack.html"
  echo "<html><body><ul>" > "$BS_SESSION_FILE"
  for ((si=0; si<${#BS_SESSION_INFO[@]}; si+=2)) {
    echo "<li><a href=\"${BS_SESSION_INFO[$si+1]}\" target=\"_blank\">${BS_SESSION_INFO[$si]}</a></li>" >> "$BS_SESSION_FILE"
    echo "  ${BS_SESSION_INFO[$si]}"
    echo "  ${BS_SESSION_INFO[$si+1]}"
  }
  echo "</ul></body></html>" >> "$BS_SESSION_FILE"
}

exit $RET_CODE
